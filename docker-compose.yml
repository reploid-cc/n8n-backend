# Main orchestration file - All services included for simple docker-compose up/down
version: '3.8'

networks:
  n8n-local-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1

volumes:
  # Core data volumes
  postgres_data:
    name: postgres_data
  n8n_data:
    name: n8n_data
  nginx_logs:
    name: nginx_logs
  cloudflared_config:
    name: cloudflared_config

services:
  # Core Database Service
  postgres:
    image: postgres:latest
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env.local
    
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d:ro
      - ./database/ref:/docker-entrypoint-ref:ro
      
    networks:
      n8n-local-network:
        ipv4_address: 172.21.0.10
        
    ports:
      - "127.0.0.1:5432:5432"
      
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # n8n Backend Service
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    env_file:
      - .env.local
    
    environment:
      # Database configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_SCHEMA: public
      
      # n8n configuration
      N8N_HOST: ${N8N_HOST}
      N8N_PROTOCOL: https
      N8N_PORT: 5678
      WEBHOOK_URL: https://${N8N_HOST}/
      
      # Execution mode (NORMAL, not queue)
      EXECUTIONS_MODE: regular
      
      # Security
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      
    volumes:
      - n8n_data:/home/node/.n8n
      
    networks:
      n8n-local-network:
        ipv4_address: 172.21.0.20
        
    ports:
      - "127.0.0.1:5678:5678"
      
    depends_on:
      postgres:
        condition: service_healthy
        
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # NocoDB Database UI
  nocodb:
    image: nocodb/nocodb:latest
    container_name: nocodb
    restart: unless-stopped
    env_file:
      - .env.local
    
    environment:
      NC_DB: "pg://postgres:5432?u=${POSTGRES_USER}&p=${POSTGRES_PASSWORD}&d=${POSTGRES_DB}"
      NC_AUTH_JWT_SECRET: ${NC_AUTH_JWT_SECRET}
      NC_PUBLIC_URL: https://nocodb.${BASE_DOMAIN}
      
    networks:
      n8n-local-network:
        ipv4_address: 172.21.0.30
        
    ports:
      - "127.0.0.1:8080:8080"
      
    depends_on:
      postgres:
        condition: service_healthy
        
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:8080/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    env_file:
      - .env.local
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      
    networks:
      n8n-local-network:
        ipv4_address: 172.21.0.40
        
    ports:
      - "80:80"
      - "443:443"
      
    depends_on:
      - n8n
      - nocodb
      
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cloudflared Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    env_file:
      - .env.local
    
    command: tunnel --config /etc/cloudflared/config.yml run
    
    volumes:
      - ./cloudflared:/etc/cloudflared:ro
      - C:/Users/PC/.cloudflared:/home/nonroot/.cloudflared:ro
      
    networks:
      n8n-local-network:
        ipv4_address: 172.21.0.50
        
    depends_on:
      - nginx
      
    healthcheck:
      test: ["CMD-SHELL", "pgrep cloudflared || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Usage: docker-compose up -d (reads from .env.local automatically) 